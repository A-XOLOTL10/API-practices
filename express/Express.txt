npm init --y // to initialize te mode package.json file
npm i express// to add express dependencies
npm i -D nodemon // to create the nodemon file
const express = require('express')
const app = express();
const port = 4050;
const mongoose = require('mongoose');
const dataUrl = "mongodb+srv://divineezenagu10:Ezenagu123@firstwork.u5rweqe.mongodb.net/";

app.use(express.json())

//connect to database
mongoose.connect(dataUrl).then(()=>{
    console.log("connected")
}).catch((error)=>{
    console.log(error.message) 
}) 

const electionSchema =  mongoose.Schema(
    {
      
        parties:{type: Array,required:[true,"put in your info"]},
        state:{type: String,required:[true,"put in your info"]},
        totalRegVoters:{type:Number,required:[true,"put in your info"]},
        collector:{type:String,required:[true,"put in your info"]},
        totalVotes:{type:Object,required:[true,"put in your info"]},
        isrigged:{type:Boolean,
        default: function(){
            totalVoters = 0
            rigged="election was rigged";
            notRigged = "election not riggd "
            for([Key,values] of Object.entries(this.totalVotes)){
             totalVoters += values
             if(totalVoters > this.totalRegVoters ){
                return true
             }else{
                return false;
             }
                   
            }
        }
        },
        result:{type:String,
        default: function(){
            maxvalue = 0
            maxkey = null
            for([key,values] of Object.entries(this.totalVotes)){
                
                if(values > maxvalue && this.isrigged === false){
                    maxvalue = values  
                    maxkey = `${key} is the winner `
                    return maxkey
                                  
                }else{
                   return "you be scammer"
                }
        }
    
}
    }
}
)

const electionModel =  mongoose.model("electionInfo",electionSchema) ;



//create candidate
app.post('/elect',async (req,res)=>{
    try {
        const election = await electionModel.create(req.body)
        res.status(200).json({
            message:"data record created succesfully",
            election:election
        })
        
    } catch (error) {
        console.log()
        res.status(404).json({
            message:error.message
        })
        
    }
})

//get all results
app.get('/election',async(req,res)=>{
   try {
    const allElection = await electionModel
    res.status(200).json({
        
    })
    
   } catch (error) {
    res.status(404).json({
        message:"no data found"
    })
   }
})

app.get('/election/:state',async (req,res)=>{
    try{
       
        const electionWinner = await electionModel.find({state: req.params.state})
        console.log(electionWinner )
        res.status(200).json({
            winner: electionWinner.winner.result
        })
        
    }
    catch{

    }
})
app.delete('/election/:state',async (req,res)=>{

    try {
       await electionModel.deleteMany({state : "lagos"})
        res.status(200).json({
           message:"deleted"
        })

        
    } catch (error) {
        res.status(404).json({
            message:error.message
        })
        
    }
   

})

app.listen(port,()=>{
   console.log(`app listening on ${port}`)
})